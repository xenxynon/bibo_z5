/* vivo used power supply */
/*
 *  Copyright Â© 2020  yangzhihui
 *
 */
#ifndef __VIVO_POWER_SUPPLY_H__
#define __VIVO_POWER_SUPPLY_H__

#include <linux/power_supply.h>
#include <linux/pm_wakeup.h>

#define POWER_SUPPLY_GET_PROPERTY(psy, psp, val) \
	(power_supply_get_property(psy, (enum power_supply_property)psp, val))

#define POWER_SUPPLY_SET_PROPERTY(psy, psp, val) \
	(power_supply_set_property(psy, (enum power_supply_property)psp, val))


enum vivo_power_supply_property {
	/* INT: Properties of type `int' */
	/* vivo add user node start */
	POWER_SUPPLY_PROP_DELTA = POWER_SUPPLY_PROP_REVERSE_CHG_MODE + 10,
	POWER_SUPPLY_PROP_HEALTH_STATUS,
	POWER_SUPPLY_PROP_CMS_ENABLE,
	POWER_SUPPLY_PROP_FASTCHG_CURRENT_NOW,
	POWER_SUPPLY_PROP_FASTCHG_IS_OK,
	POWER_SUPPLY_PROP_INPUT_SUSPEND,
	POWER_SUPPLY_PROP_REAL_TYPE,
	POWER_SUPPLY_PROP_FIXED_TEMP,
	POWER_SUPPLY_PROP_CHG_TYPE,
	POWER_SUPPLY_PROP_CHG_VOLTAGE,
	POWER_SUPPLY_PROP_BATTERY_ID,
	POWER_SUPPLY_PROP_SWITCH_STATE,
	POWER_SUPPLY_PROP_CALLING_STATE,
	POWER_SUPPLY_PROP_WEIXIN_CALLING_STATE,
	POWER_SUPPLY_PROP_CAMERA_STATE,
	POWER_SUPPLY_PROP_CARLIFE_STATE,
	POWER_SUPPLY_PROP_FACTORY_MODE_STATE,
	POWER_SUPPLY_PROP_CHG_EST_VBAT_DIFF,
	POWER_SUPPLY_PROP_HTCCC_ENABLE,
	POWER_SUPPLY_PROP_EX_FG_STATE,
	POWER_SUPPLY_PROP_FFC_SUPPORT,
	POWER_SUPPLY_PROP_FFC_CHARGE_FULL,
	POWER_SUPPLY_PROP_SUPPORTED_ADAPTER,
	POWER_SUPPLY_PROP_PRIMARY_BOARD_TEMP,
	POWER_SUPPLY_PROP_PARALLEL_BOARD_TEMP,
	//POWER_SUPPLY_PROP_USB_CON_VBUS_PULL_DOWN,
	POWER_SUPPLY_PROP_CURRENT_SPEC_MIN,
	POWER_SUPPLY_PROP_CURRENT_SPEC_MAX,
	POWER_SUPPLY_PROP_STATUS_EX,
	POWER_SUPPLY_PROP_TYPEC_CC_ORIENTATION, /* 0: N/C, 1: CC1, 2: CC2 */
	POWER_SUPPLY_PROP_LOADER_SWITCH_COUNTER,
	POWER_SUPPLY_PROP_UPDATE_NOW,
	POWER_SUPPLY_PROP_FFC_DISABLE,
	POWER_SUPPLY_PROP_PARALLEL_MODE,
	/* add for vivo super FlashCharge */
	POWER_SUPPLY_PROP_ENGINE,
	POWER_SUPPLY_PROP_SOC_DECIMAL,
	POWER_SUPPLY_PROP_CHARGING_SPEED,
	POWER_SUPPLY_PROP_BOARD_TEMP_STATE,
	POWER_SUPPLY_PROP_BAT_FCC,
	POWER_SUPPLY_PROP_BAT_RM,
	POWER_SUPPLY_PROP_REAL_SOC,
	/* FlashCharge end */
	POWER_SUPPLY_PROP_KEEP_CHG_SOC,
	POWER_SUPPLY_PROP_BSPTEST_START_CHG_SOC,
	POWER_SUPPLY_PROP_BSPTEST_STOP_CHG_SOC,
	POWER_SUPPLY_PROP_EXHIBITION_MODE,
	POWER_SUPPLY_PROP_CHARGING_ENABLED,
	POWER_SUPPLY_PROP_CHARGE_NOW_RAW,
	POWER_SUPPLY_PROP_DRP_MODE,
	POWER_SUPPLY_PROP_SNK_MODE,
	//POWER_SUPPLY_PROP_SOC_DECIMAL,
	//POWER_SUPPLY_PROP_CHARGING_SPEED,
	POWER_SUPPLY_PROP_CHARGING_TECHNOLOGY,
	/*fg*/
	POWER_SUPPLY_PROP_DISABLE_CHARGE,
	POWER_SUPPLY_PROP_CHEM_ID,
	/* vivo add user node end */
	/* INT (END): Properties of type `int' */



	/* CONST CHAR *: Properties of type `const char *' */
	POWER_SUPPLY_PROP_FG_INFO,//between MODEL_NAME and SERIAL_NUMBER
	POWER_SUPPLY_PROP_DEBUG_INFO,
	/* CONST CHAR * (END): Properties of type `const char *' */



	/* vivo extensions of type int for no user node */
	POWER_SUPPLY_PROP_LIMIT_BATT_CURRENT_USER,
	POWER_SUPPLY_PROP_LIMIT_INPUT_CURRENT_USER,
	POWER_SUPPLY_PROP_LIMIT_INPUT_CURRENT_MAX,
	POWER_SUPPLY_PROP_CHARGER_HEALTH,
	POWER_SUPPLY_PROP_BATTERY_CAPACITY_MAH,
	POWER_SUPPLY_PROP_PRIMARY_FASTCHG_MAX,
	POWER_SUPPLY_PROP_PARALLEL_FASTCHG_MAX,
	POWER_SUPPLY_PROP_PRIMARY_FASTCHG_ALLOC,
	POWER_SUPPLY_PROP_PARALLEL_FASTCHG_ALLOC,
	POWER_SUPPLY_PROP_BATTERY_COMPENSATE_R,
	POWER_SUPPLY_PROP_DC_PRESENT,
	POWER_SUPPLY_PROP_DC_CUTOFF,
	POWER_SUPPLY_PROP_INIT_SLAVE_CHARGER,
	POWER_SUPPLY_PROP_PARALLEL_FCC_MIN,
	POWER_SUPPLY_PROP_WATCH_DOG_STATUS,
	POWER_SUPPLY_PROP_SLAVE_SUSPEND_STATUS,
	POWER_SUPPLY_PROP_CHECK_SLAVE_CHARGER_STATUS,
	POWER_SUPPLY_PROP_WEAK_CHARGER,
	POWER_SUPPLY_PROP_IIC_STATE,
	POWER_SUPPLY_PROP_RECHARGE_STATE,
	POWER_SUPPLY_PROP_FORCE_DPDM,
	POWER_SUPPLY_PROP_DUMP_REG,
	POWER_SUPPLY_PROP_LIMIT_INPUT,
	POWER_SUPPLY_PROP_VINDPM,
	POWER_SUPPLY_PROP_BSP_CHG_CUTOFF,
	POWER_SUPPLY_PROP_PMI_STATUS,
	POWER_SUPPLY_PROP_CHECK_FAST_CHARGE,
	POWER_SUPPLY_PROP_ENABLE_FAST_CHARGE,
	POWER_SUPPLY_AI_CHARGE_STATE,
	POWER_SUPPLY_PROP_ICL_CHANGE,
	POWER_SUPPLY_PROP_DETECT_ICL_IBAT_UA,
	POWER_SUPPLY_PROP_HW_CHG_TIMEOUT,
	POWER_SUPPLY_PROP_USB_CONNDONED,
	POWER_SUPPLY_PROP_BATTERY_PARAM_STATUS,
	POWER_SUPPLY_PROP_CHG_VOLTAGE_EX,
	POWER_SUPPLY_PROP_OTG_DISABLE_PL,
	POWER_SUPPLY_PROP_FG_MONITOR_WORK,
	POWER_SUPPLY_PROP_RERUN_AICL,
	POWER_SUPPLY_PROP_RESISTANCE,
	POWER_SUPPLY_PROP_USB_SET_RERUN_TIMER,
	POWER_SUPPLY_PROP_FG_SET_CHG_STATUS,
	POWER_SUPPLY_AI_CHARGE_STAE,
	/*bq fg*/
	POWER_SUPPLY_PROP_BATT_RECHARGE,
	POWER_SUPPLY_PROP_CHARGER_REMOVE,
	POWER_SUPPLY_PROP_FG_EXCEPTION_STATE,
	POWER_SUPPLY_PROP_BQBMS_FCC,
	POWER_SUPPLY_PROP_FG_ESR_EXCEPTION,
	POWER_SUPPLY_PROP_CELL_OVER_VOLTAGE,
	POWER_SUPPLY_PROP_CAPACITY_RAW,
	POWER_SUPPLY_PROP_FG_RESET,
	/*dchg*/
	POWER_SUPPLY_PROP_USBSEL,
	POWER_SUPPLY_PROP_MCU_POWER,
	POWER_SUPPLY_PROP_USBIN_VOLTAGE,
	POWER_SUPPLY_PROP_HANDSHAKE_STATUS,
	POWER_SUPPLY_PROP_ADAPTER_HANDSHAKE,
	POWER_SUPPLY_PROP_DCHG_ENABLED,
	POWER_SUPPLY_PROP_DCHG_LIMIT_MA,
	POWER_SUPPLY_PROP_DCHG_CURRENT,
	POWER_SUPPLY_PROP_DCHG_CHARGING_ENABLED,
	POWER_SUPPLY_PROP_USB_CONN_FLAG,
	POWER_SUPPLY_PROP_USB_CONN_TEMP,
	POWER_SUPPLY_PROP_BAT_BOARD_TEMP,
	POWER_SUPPLY_PROP_ADAPTER_TEMP,
	POWER_SUPPLY_PROP_PCB_CONN_TEMP,
	POWER_SUPPLY_PROP_BAT_CONN_TEMP,
	POWER_SUPPLY_PROP_DCHG_STATUS,
	POWER_SUPPLY_PROP_DCHG_ENABLE,

	POWER_SUPPLY_PROP_DCHG_CABLER,
	POWER_SUPPLY_PROP_MASTER_BAT_CONN_TEMP,
	POWER_SUPPLY_PROP_DCHG_CALL_START,
	POWER_SUPPLY_PROP_USB_NTC_CONNECT_TO,
	
	POWER_SUPPLY_PROP_ADAPTER_POWER_DERATE,
	POWER_SUPPLY_PROP_ADAPTER_POWER_DERATE_ALREADY,
	POWER_SUPPLY_PROP_ADAPTER_POWER,
	POWER_SUPPLY_PROP_ADAPTER_IBUS_MAX,

	POWER_SUPPLY_PROP_DCHG_HEAVY_LOAD,

	/*fuelsummary*/
	POWER_SUPPLY_PROP_FEX_CNT,
	POWER_SUPPLY_PROP_FEX_RUNNING,
	POWER_SUPPLY_PROP_FUEL_USER_CUSTOM,
	POWER_SUPPLY_PROP_FUEL_CUSTOM_INPUT,
	POWER_SUPPLY_PROP_FUEL_CUSTOM_CURRENT,
	POWER_SUPPLY_PROP_FUEL_CUSTOM_VOLTAGE,
	/* typec control */
	POWER_SUPPLY_PROP_TYPEC_SWITCH,
	POWER_SUPPLY_PROP_TYPEC_DATA_ROLE,
	/*cms*/
	POWER_SUPPLY_PROP_CHARGE_TERM_VOLTAGE,
	POWER_SUPPLY_PROP_DISABLE_CHG,
	POWER_SUPPLY_PROP_DISABLE_CHG_TIMEOUT,
	POWER_SUPPLY_PROP_PKG_STATE,
	/*ffc*/
	POWER_SUPPLY_PROP_FFC_STATE,
	POWER_SUPPLY_PROP_MCQ_IRQ,
	/*battery&usb*/
	POWER_SUPPLY_PROP_PARALLEL_BATFET_MODE,
	POWER_SUPPLY_PROP_PARALLEL_FCC_MAX,
	POWER_SUPPLY_PROP_MIN_ICL,
	POWER_SUPPLY_PROP_INPUT_CURRENT_LIMITED,
	POWER_SUPPLY_PROP_INPUT_CURRENT_SETTLED,
	POWER_SUPPLY_PROP_INPUT_VOLTAGE_SETTLED,
	POWER_SUPPLY_PROP_MAIN_FCC_MAX,
	POWER_SUPPLY_PROP_FCC_STEPPER_ENABLE,
	POWER_SUPPLY_PROP_HW_CURRENT_MAX,
	POWER_SUPPLY_PROP_FCC_DELTA,
	POWER_SUPPLY_PROP_CP_SWITCHER_EN,
	POWER_SUPPLY_PROP_OTG_ENABLE,
	POWER_SUPPLY_PROP_OTG_VBUS_ENABLE,
	POWER_SUPPLY_PROP_HW_TERM_STATE,
	POWER_SUPPLY_PROP_SHIP_MODE_EN,
	/*ex fg*/
	POWER_SUPPLY_PROP_FCC,
	POWER_SUPPLY_PROP_UFFCC,
	POWER_SUPPLY_PROP_BATTERY_VERSION,
	/*qc dual bq*/
	POWER_SUPPLY_PROP_CHARGER_TEMP_MAX,
	POWER_SUPPLY_PROP_CHARGE_TYPE_TAPER,
	POWER_SUPPLY_PROP_SLAVE_CHARGER_EN,
	/* add for factory charging test */
	POWER_SUPPLY_PROP_HALF_CHG_MASTER_IBUS,
	POWER_SUPPLY_PROP_HALF_CHG_SLAVE_IBUS,
	POWER_SUPPLY_PROP_FACTORY_10W_CHARGE_TEST,
	/*dual battery*/
	POWER_SUPPLY_PROP_CELL_VOLTAGE_MIN,
	POWER_SUPPLY_PROP_CELL1_VOLTAGE,
	POWER_SUPPLY_PROP_CELL2_VOLTAGE,
	POWER_SUPPLY_PROP_ALTERNATE_CHARGER,
	POWER_SUPPLY_PROP_SETTING_USBIN_OVP,
	
	POWER_SUPPLY_PROP_DIRECT_CHG_BYPASS_TO_SWITCH_CHG,
	POWER_SUPPLY_PROP_DIRECT_CHG_BYPASS_TO_DIRECT_CHARGING,
	POWER_SUPPLY_PROP_HVDCP_ENABLE,
	POWER_SUPPLY_PROP_DDPM_RESET,	//set Dp/Dm=0 and then HIZ

	POWER_SUPPLY_PROP_BC1P2_RESULT,

	POWER_SUPPLY_PROP_IS_FFC_RUNNING,
	POWER_SUPPLY_PROP_FFC_TERMINATION_VOLTAGE,	//Vbat
	POWER_SUPPLY_PROP_FFC_TERMINATION_CURRENT,	//Ibat

	POWER_SUPPLY_PROP_CC_STATE_TRIGGER,
	
	POWER_SUPPLY_PROP_RERUN_APSD,	
	/*type-c */
	POWER_SUPPLY_PROP_TYPEC_MODE,
	POWER_SUPPLY_PROP_PD_ACTIVE,
	POWER_SUPPLY_PROP_PE_START,
	
	POWER_SUPPLY_PROP_USB_OTG,
	POWER_SUPPLY_PROP_USB_CONN1_TEMP,

	POWER_SUPPLY_PROP_FG_SOFT_RESET,	//bq27426 soft reset subcmd
	POWER_SUPPLY_PROP_FG_DEVICE_TYPE,

	POWER_SUPPLY_PROP_BATT_EMPTY_NOTIFY,
	POWER_SUPPLY_PROP_INTELL_SCENE,
};

/* What algorithm is the charger using? -- vivo add */
enum {
	POWER_SUPPLY_CHARGE_TYPE_TAPER = POWER_SUPPLY_CHARGE_TYPE_CUSTOM + 1,
};

enum {
	POWER_SUPPLY_HEALTH_DUAL_ENGINE = POWER_SUPPLY_HEALTH_HOT + 1,	/* QC2.0 10V/2.25A */
	POWER_SUPPLY_HEALTH_VIVO_SUPER_FLASH_CHARGE,	/* 10V/4A/5A/6A */
};

enum {
	POWER_SUPPLY_PL_NONE,
	POWER_SUPPLY_PL_USBIN_USBIN,
	POWER_SUPPLY_PL_USBIN_USBIN_EXT,
	POWER_SUPPLY_PL_USBMID_USBMID,
};

enum {
	POWER_SUPPLY_PL_STACKED_BATFET,
	POWER_SUPPLY_PL_NON_STACKED_BATFET,
};

/* add for vivo super FlashCharge */
enum {
	POWER_SUPPLY_ENGINE_NORMAL = 0,
	POWER_SUPPLY_ENGINE_DUAL,
	POWER_SUPPLY_ENGINE_RESERVED,
	POWER_SUPPLY_ENGINE_SUPER,
};
static const char* const psy_engine_strings[] = {
	"POWER_SUPPLY_ENGINE_NORMAL",
	"POWER_SUPPLY_ENGINE_DUAL",
	"POWER_SUPPLY_ENGINE_RESERVED",
	"POWER_SUPPLY_ENGINE_SUPER",
};

static const char* const psy_status_strings[] = {
	"POWER_SUPPLY_STATUS_UNKNOWN",
	"POWER_SUPPLY_STATUS_CHARGING",
	"POWER_SUPPLY_STATUS_DISCHARGING",
	"POWER_SUPPLY_STATUS_NOT_CHARGING",
	"POWER_SUPPLY_STATUS_FULL",
};

static const char* const psy_charge_type_strings[] = {
	"POWER_SUPPLY_CHARGE_TYPE_UNKNOWN",
	"POWER_SUPPLY_CHARGE_TYPE_NONE",
	"POWER_SUPPLY_CHARGE_TYPE_TRICKLE",	/* slow speed */
	"POWER_SUPPLY_CHARGE_TYPE_FAST",		/* fast speed */
	"POWER_SUPPLY_CHARGE_TYPE_STANDARD",	/* normal speed */
	"POWER_SUPPLY_CHARGE_TYPE_ADAPTIVE",	/* dynamically adjusted speed */
	"POWER_SUPPLY_CHARGE_TYPE_CUSTOM",	/* use CHARGE_CONTROL_* props */
};


enum vivo_power_supply_type {
	POWER_SUPPLY_TYPE_BMS = POWER_SUPPLY_TYPE_USB_FLOAT + 1,	/* Battery Monitor System */
	POWER_SUPPLY_TYPE_PARALLEL,		/* Parallel Path */
	POWER_SUPPLY_TYPE_USB_OCP,		/* other type */
};

#if 0
/* Indicates USB Type-C CC connection status(used on Qcom platform) */
enum power_supply_typec_mode {
	POWER_SUPPLY_TYPEC_NONE,

	/* Acting as source */
	POWER_SUPPLY_TYPEC_SINK,		/* Rd only */
	POWER_SUPPLY_TYPEC_SINK_POWERED_CABLE,	/* Rd/Ra */
	POWER_SUPPLY_TYPEC_SINK_DEBUG_ACCESSORY,/* Rd/Rd */
	POWER_SUPPLY_TYPEC_SINK_AUDIO_ADAPTER,	/* Ra/Ra */
	POWER_SUPPLY_TYPEC_POWERED_CABLE_ONLY,	/* Ra only */

	/* Acting as sink */
	POWER_SUPPLY_TYPEC_SOURCE_DEFAULT,	/* Rp default */
	POWER_SUPPLY_TYPEC_SOURCE_MEDIUM,	/* Rp 1.5A */
	POWER_SUPPLY_TYPEC_SOURCE_HIGH,		/* Rp 3A */
	POWER_SUPPLY_TYPEC_NON_COMPLIANT,
};
#endif
/* FlashCharge end */

// #ifdef CONFIG_PM_SLEEP
// /* drivers/base/power/wakeup.c */
// extern void wakeup_source_prepare(struct wakeup_source *ws, const char *name);
// extern void wakeup_source_drop(struct wakeup_source *ws);
// #else /* !CONFIG_PM_SLEEP */
// inline void wakeup_source_prepare(struct wakeup_source *ws,
// 					const char *name)
// {
// }
// inline void wakeup_source_drop(struct wakeup_source *ws)
// {
// }
// #endif /* !CONFIG_PM_SLEEP */

// static inline void wakeup_source_init(struct wakeup_source *ws,
// 				      const char *name)
// {
// 	wakeup_source_prepare(ws, name);
// 	wakeup_source_add(ws);
// }

// static inline void wakeup_source_trash(struct wakeup_source *ws)
// {
// 	wakeup_source_remove(ws);
// 	wakeup_source_drop(ws);
// }


#endif /* __VIVO_POWER_SUPPLY_H__ */
